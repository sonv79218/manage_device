import React, { useState, useEffect } from 'react';
import Container from '../../components/layout/Container';
import Card from '../../components/card/CardUser';
// import Filter from '../components/filter/Filter';
import DeviceRequestForm from '../../components/form/DeviceRequestForm';
import api from '../../config/api';

const DeviceListPage = () => {
  // ph·∫ßn th√™m trang
const [page, setPage] = useState(1);
const limit = 6;
const [totalCount, setTotalCount] = useState(0);
const [totalPages, setTotalPages] = useState(0);

  const [hasRequest, setHasRequest] = useState(false); // th√™m c√¥ng t·∫Øc 
  const [devices, setDevices] = useState([]);
  const [typeFilter, setTypeFilter] = useState([]);// l∆∞u m·∫£ng tr·∫£ v·ªÅ backend 
  const [statusFilter, setStatusFilter] = useState([]);
  // l∆∞u l·ª±a ch·ªçn 
  const [selectedType, setSelectedType] = useState(""); // lo·∫°i ƒë∆∞·ª£c ch·ªçn
  const [selectedStatus, setSelectedStatus] = useState(""); // lo·∫°i ƒë∆∞·ª£c ch·ªçn

  const [actionType, setActionType] = useState(null);
  const [selectedDeviceId, setSelectedDeviceId] = useState(null); // bi·∫øn xem c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
  const [requestedDeviceIds, setRequestedDeviceIds] = useState([]); // l∆∞u v√†o m·∫£ng c√°c s·∫£n ph·∫©m m√¨nh ƒë√£ g·ª≠i y√™u c·∫ßu m∆∞·ª£n
  // h√†m useEffect s·∫Ω t·ª± ƒë·ªông l√†m khi c√≥ thay ƒë·ªïi 
// th·ª±c hi·ªán khi ƒë√£ load h·∫øt code r·ªìi 
    // l·∫•y c·∫£ c√°c l·ªùi y√™u c·∫ßu c·ªßa m√¨nh ƒë·ªÉ c·∫≠p nh·∫≠t n√∫t b·∫•m - 
    const fetchBorrowRequests = async () => {
    const res = await api.get('/borrow-request/me');
    const deviceIds = res.data.map(r => r.product.device_id); 
    // console.log('üü¢ C√°c device_id ƒë√£ m∆∞·ª£n:', deviceIds);
    setRequestedDeviceIds(deviceIds); // l∆∞u v√†o m·∫£ng deviceIds
  };
      // l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    const fetchDevices = async () => {
      // khai b√°o ƒë·ªëi t∆∞·ª£ng param
      const params = {};
        if (selectedType) params.type = selectedType;
        if (selectedStatus) params.status = selectedStatus;
        params.page = page; // truy·ªÅn v√†o trang m·∫∑c ƒë·ªãnh - ƒë·∫ßu ti√™n l√† page = 1 sau page s·∫Ω thay ƒë·ªïi 
        params.limit = limit; // truy·ªÅn v√†o limit 
      const response = await api.get('/product', { params });
      setDevices(response.data.data); 
      setTotalCount(response.data.totalCount); // t·ªïng s·ªë s·∫£n ph·∫©m tr·∫£ v·ªÅ 
      // console.log(response.data);
    };
// h√†m c√≥ ch·ª©c nƒÉng g·ªçi 1 l·∫ßn ƒë·ªÉ l·∫•y d·ªØ li·ªáu 
  useEffect(() => {
      const fetchFilter = async () => {
      // khai b√°o ƒë·ªëi t∆∞·ª£ng param
      const response = await api.get('/product/filters');
      setTypeFilter(response.data.types);
      setStatusFilter(response.data.statuses);
      // console.log(response.data.types);
      // console.log(typeFilter);
    };
    fetchFilter();
    // fetchDevices();
    // fetchBorrowRequests();
  },[]);// g·ªçi l·∫°i khi c√≥ page thay ƒë·ªïi
  // g·ªçi useEffect khi c√≥ thay ƒë·ªïi
  // console.log("typeFilter ƒë√£ c·∫≠p nh·∫≠t:", typeFilter);
    // Theo d√µi khi state thay ƒë·ªïi (debug)
  useEffect(() => {
  fetchDevices(); // n·∫øu m√† fetch xong th√¨ s·ªë l∆∞·ª£ng trang c≈©ng ph·∫£i thay ƒë·ªïi 
}, [selectedType,selectedStatus,page]); // n·∫øu m√† ch·ªçn lo·∫°i th√¨ danh s√°ch tr·∫£ v·ªÅ thay ƒë·ªïi: d·ªØ li·ªáu, s·ªë l∆∞·ª£ng trang 
  useEffect(() => {
  fetchBorrowRequests(); // n·∫øu m√† fetch xong th√¨ s·ªë l∆∞·ª£ng trang c≈©ng ph·∫£i thay ƒë·ªïi 
}, []); 
// const uniqueTypes = Array.from(new Set(devices.map((device) => device.type)));
// const uniqueStatus = Array.from(new Set(devices.map((device) => device.status)));

  // const filteredDevices = devices.filter( 
  //   (device) =>
  //     (!typeFilter || device.type === typeFilter) && // l·ªçc theo lo·∫°i - n·∫øu c√≥ 
  //     (!statusFilter || device.status === statusFilter) // l·ªçc theo tr·∫°ng th√°i - n·∫øu c√≥
  // );

  const handleRequest = (deviceId) => {
    setSelectedDeviceId(deviceId);
    setActionType('borrow'); // set bi·∫øn type b·∫±ng borrow
  };

  const handleCloseForm = () => {
    setSelectedDeviceId(null);
  };
  
const handleAfterRequest = () => {
  // setHasRequest(true);
  fetchBorrowRequests();

};
// ph·∫ßn totalPage n√†y ph·∫£i thay ƒë·ªïi khi totalCount thay ƒë·ªïi
useEffect(()=>{const totalPages = Math.ceil(totalCount / limit);
  setTotalPages(totalPages);
  setPage(1);
},[totalCount])

// useEffect(()=>{console.log(devices)
// console.log('s·ªë s·∫£n ph·∫©m l·∫•y v·ªÅ',totalCount)},[devices, totalCount])


// console.log('s·ªë trang ',totalPages);
  // M·ªói khi ng∆∞·ªùi d√πng ch·ªçn lo·∫°i m·ªõi
  const handleTypeChange = (e) => {
    setSelectedType(e.target.value);
  };
  const handleStatusChange = (e) => {
    setSelectedStatus(e.target.value);
  };
    // Theo d√µi gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn (debug)
  // useEffect(() => {
  //   console.log("Lo·∫°i ƒë∆∞·ª£c ch·ªçn:", selectedType);
  //   // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ªçi API l·ªçc s·∫£n ph·∫©m theo lo·∫°i
  // }, [selectedType,selectedStatus]);
  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Danh s√°ch thi·∫øt b·ªã</h2>
      {/* <Filter 
      statusOptions={statusFilter}
      typeOptions={typeFilter}
      onTypeChange={(e) => setTypeFilter(e.target.value)} 
      onStatusChange={(e) => setStatusFilter(e.target.value)} /> */}
            {/* L·ªçc theo lo·∫°i */}
      <select value={selectedType} onChange={handleTypeChange}>
        <option value="">T·∫•t c·∫£ lo·∫°i</option>
        {typeFilter.map((type, index) => (
          <option key={index} value={type}>
            {type}
          </option>
        ))}
      </select>
            <select value={selectedStatus} onChange={handleStatusChange}>
        <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
        {statusFilter.map((type, index) => (
          <option key={index} value={type}>
            {type}
          </option>
        ))}
      </select>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4">

        {/* map devices */}
        {/* truy·ªÅn d·ªØ li·ªáu v√†o t·ª´ng device */}
        {
          devices.length === 0 ? (
    <div className="col-span-full text-center text-gray-500 py-8">
      Kh√¥ng c√≥ d·ªØ li·ªáu
    </div>
  ) : (
        
        devices.map((device) => (
          <Card
          // l∆∞u deviceid v√†o key
            key={device.device_id}
            // t√™n
            title={device.name}
            // tr·∫°ng th√°i
            status={device.status}
            // truy·ªÅn th√™m 
            type={device.type}

            serial_number={device.serial_number}
            //  m∆∞·ª£n thi·∫øt b·ªã 
            onRequest={() => handleRequest(device.device_id)} 
            //  c·∫≠p nh·∫≠t 2 bi·∫øn m·ªü popup 
            // tr·∫£ thi·∫øt b·ªã ??
            // onReturn={() => handleReturn(device.device_id)}
            hasRequested={requestedDeviceIds.includes(device.device_id)} // ‚úÖ th√™m d√≤ng n√†y
            //requestdeviceId bao g·ªìm device.device_id th√¨ tr·∫£ v·ªÅ true kh√¥ng th√¨ l√† fail
          
          >
          </Card>

        )))}
      </div>


<div className="flex justify-between mt-4">
  <button
    onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
    disabled={page === 1}
    className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
  >
    Trang tr∆∞·ªõc
  </button>

  <span>Trang {page} / {totalPages}</span>

  <button
    onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
    disabled={page >= totalPages}
    className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
  >
    Trang sau
  </button>
</div>

      
      {/*  n·∫øu t·ªìn t·∫°i  */}
      {/*  v·∫•n ƒë·ªÅ l√† c·∫£ return v√† request ƒë·ªÅu c·∫ßn ph·∫£i l∆∞u id v√†o state -> l∆∞u c·∫£ id v√† l∆∞u c·∫£ mode v√†o state*/} 
      {/* {selectedDeviceId && <DeviceRequestForm deviceId={selectedDeviceId} onClose={handleCloseForm} />} */}
 {/* ƒëi·ªÅu khi·ªÉn popup  */}
    {selectedDeviceId && actionType === 'borrow' && ( // khi m√† 1 s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn v√† theo ki·ªÉu borrow th√¨ s·∫Ω hi·ªán ra form 
    <DeviceRequestForm deviceId={selectedDeviceId} onClose={handleCloseForm} onSuccess={handleAfterRequest}  /> 
)}
    </div>
  );
};

export default DeviceListPage;
